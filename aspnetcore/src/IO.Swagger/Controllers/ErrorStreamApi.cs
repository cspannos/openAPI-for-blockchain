/*
 * OpenAPI Implementation of Eth 2.0 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ErrorStreamApiController : ControllerBase
    { 
        /// <summary>
        /// Node error events.
        /// </summary>
        /// <remarks>Requests that the beacon node produce an IndexedAttestation, with a blank signature field, which the validator will then sign.</remarks>
        /// <param name="slot">The slot for which the attestation should be proposed.</param>
        /// <param name="shard">The shard number for which the attestation is to be proposed.</param>
        /// <response code="200">Success response</response>
        /// <response code="400">Invalid request syntax.</response>
        /// <response code="500">Beacon node internal error.</response>
        /// <response code="503">Beacon node is currently syncing, try again later.</response>
        [HttpGet]
        [Route("/insight-dc-sv-2020/Spacemesh_Public_OpenAPI/1.0.0/validator/attestation")]
        [ValidateModelState]
        [SwaggerOperation("ValidatorAttestationGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(IndexedAttestation), description: "Success response")]
        public virtual IActionResult ValidatorAttestationGet([FromQuery][Required()]int? slot, [FromQuery][Required()]int? shard)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IndexedAttestation));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"beacon_block_root\" : \"\",\n    \"source_root\" : \"\",\n    \"target_epoch\" : 5,\n    \"source_epoch\" : 1,\n    \"target_root\" : \"\",\n    \"crosslink\" : {\n      \"data_root\" : \"\",\n      \"parent_root\" : \"\",\n      \"epoch\" : 2,\n      \"shard\" : 5\n    }\n  },\n  \"custody_bit_1_indicies\" : [ 6, 6 ],\n  \"custody_bit_0_indicies\" : [ 0, 0 ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<IndexedAttestation>(exampleJson)
                        : default(IndexedAttestation);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
