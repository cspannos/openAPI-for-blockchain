/*
 * OpenAPI Implementation of Spacemesh API 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NecessaryForValidatorApiController : ControllerBase
    { 
        /// <summary>
        /// Produce an attestation, without signature.
        /// </summary>
        /// <remarks>Requests that the beacon node produce an IndexedAttestation, with a blank signature field, which the validator will then sign.</remarks>
        /// <param name="slot">The slot for which the attestation should be proposed.</param>
        /// <param name="shard">The shard number for which the attestation is to be proposed.</param>
        /// <response code="200">Success response</response>
        /// <response code="400">Invalid request syntax.</response>
        /// <response code="500">Beacon node internal error.</response>
        /// <response code="503">Beacon node is currently syncing, try again later.</response>
        [HttpGet]
        [Route("/insight-dc-sv-2020/geth/1.0.0/validator/attestation")]
        [ValidateModelState]
        [SwaggerOperation("ValidatorAttestationGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(IndexedAttestation), description: "Success response")]
        public virtual IActionResult ValidatorAttestationGet([FromQuery][Required()]int? slot, [FromQuery][Required()]int? shard)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IndexedAttestation));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"beacon_block_root\" : \"\",\n    \"source_root\" : \"\",\n    \"target_epoch\" : 5,\n    \"source_epoch\" : 1,\n    \"target_root\" : \"\",\n    \"crosslink\" : {\n      \"data_root\" : \"\",\n      \"parent_root\" : \"\",\n      \"epoch\" : 2,\n      \"shard\" : 5\n    }\n  },\n  \"custody_bit_1_indicies\" : [ 6, 6 ],\n  \"custody_bit_0_indicies\" : [ 0, 0 ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<IndexedAttestation>(exampleJson)
                        : default(IndexedAttestation);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Published a signed attestation.
        /// </summary>
        /// <remarks>Instructs the beacon node to publish a newly signed IndexedAttestation object, to be incorporated into the beacon chain.</remarks>
        /// <param name="attestation">An &#x60;IndexedAttestation&#x60; structure, as originally provided by the beacon node, but now with the signature field completed.</param>
        /// <response code="200">Request successful.</response>
        /// <response code="400">Invalid request syntax.</response>
        /// <response code="500">Beacon node internal error.</response>
        /// <response code="503">Beacon node is currently syncing, try again later.</response>
        [HttpPost]
        [Route("/insight-dc-sv-2020/geth/1.0.0/validator/attestation")]
        [ValidateModelState]
        [SwaggerOperation("ValidatorAttestationPost")]
        public virtual IActionResult ValidatorAttestationPost([FromQuery][Required()]IndexedAttestation attestation)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Produce a new block, without signature.
        /// </summary>
        /// <remarks>Requests a beacon node to produce a valid block, which can then be signed by a validator.</remarks>
        /// <param name="slot">The slot for which the block should be proposed.</param>
        /// <param name="randaoReveal">The validator&#x27;s randao reveal value.</param>
        /// <response code="200">Success response</response>
        /// <response code="400">Invalid request syntax.</response>
        /// <response code="500">Beacon node internal error.</response>
        /// <response code="503">Beacon node is currently syncing, try again later.</response>
        [HttpGet]
        [Route("/insight-dc-sv-2020/geth/1.0.0/validator/block")]
        [ValidateModelState]
        [SwaggerOperation("ValidatorBlockGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BeaconBlock), description: "Success response")]
        public virtual IActionResult ValidatorBlockGet([FromQuery][Required()]int? slot, [FromQuery][Required()]byte[] randaoReveal)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BeaconBlock));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<BeaconBlock>(exampleJson)
                        : default(BeaconBlock);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Publish a signed block.
        /// </summary>
        /// <remarks>Instructs the beacon node to publish a newly signed beacon block to the beacon network, to be included in the beacon chain.</remarks>
        /// <param name="beaconBlock">The &#x60;BeaconBlock&#x60; object, as sent from the beacon node originally, but now with the signature field completed.</param>
        /// <response code="200">Request successful.</response>
        /// <response code="400">Invalid request syntax.</response>
        /// <response code="500">Beacon node internal error.</response>
        /// <response code="503">Beacon node is currently syncing, try again later.</response>
        [HttpPost]
        [Route("/insight-dc-sv-2020/geth/1.0.0/validator/block")]
        [ValidateModelState]
        [SwaggerOperation("ValidatorBlockPost")]
        public virtual IActionResult ValidatorBlockPost([FromQuery][Required()]BeaconBlock beaconBlock)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get validator duties for the requested validators.
        /// </summary>
        /// <remarks>Requests the beacon node to provide a set of _duties_, which are actions that should be performed by validators. This API call should be polled at every slot, to ensure that any chain reorganisations are catered for, and to ensure that the currently connected beacon node is properly synchronised.</remarks>
        /// <param name="validatorPubkeys">An array of hex-encoded BLS public keys</param>
        /// <response code="200">Success response</response>
        /// <response code="400">Invalid request syntax.</response>
        /// <response code="500">Beacon node internal error.</response>
        /// <response code="503">Beacon node is currently syncing, try again later.</response>
        [HttpGet]
        [Route("/insight-dc-sv-2020/geth/1.0.0/validator/duties")]
        [ValidateModelState]
        [SwaggerOperation("ValidatorDutiesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ValidatorDuty>), description: "Success response")]
        public virtual IActionResult ValidatorDutiesGet([FromQuery][Required()]List<Pubkey> validatorPubkeys)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ValidatorDuty>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);
            string exampleJson = null;
            exampleJson = "[ {\n  \"attestation_shard\" : 1,\n  \"attestation_slot\" : 6,\n  \"block_production_slot\" : 5,\n  \"committee_index\" : 0,\n  \"validator_pubkey\" : \"\"\n}, {\n  \"attestation_shard\" : 1,\n  \"attestation_slot\" : 6,\n  \"block_production_slot\" : 5,\n  \"committee_index\" : 0,\n  \"validator_pubkey\" : \"\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ValidatorDuty>>(exampleJson)
                        : default(List<ValidatorDuty>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
