/*
 * OpenAPI Implementation of Spacemesh API 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ShutdownApiController : ControllerBase
    { 
        /// <summary>
        /// Request that the node initiate graceful shutdown
        /// </summary>
        /// <remarks>Requests a beacon node to produce a valid block, which can then be signed by a validator.</remarks>
        /// <param name="slot">The slot for which the block should be proposed.</param>
        /// <param name="randaoReveal">The validator&#x27;s randao reveal value.</param>
        /// <response code="200">Success response</response>
        /// <response code="400">Invalid request syntax.</response>
        /// <response code="500">Beacon node internal error.</response>
        /// <response code="503">Beacon node is currently syncing, try again later.</response>
        [HttpGet]
        [Route("/insight-dc-sv-2020/Spacemesh_Public_OpenAPI/1.0.0/validator/block")]
        [ValidateModelState]
        [SwaggerOperation("ValidatorBlockGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(BeaconBlock), description: "Success response")]
        public virtual IActionResult ValidatorBlockGet([FromQuery][Required()]int? slot, [FromQuery][Required()]byte[] randaoReveal)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BeaconBlock));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<BeaconBlock>(exampleJson)
                        : default(BeaconBlock);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
