/*
 * OpenAPI Implementation of Eth 2.0 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VersionApiController : ControllerBase
    { 
        /// <summary>
        /// Returns the version of the node software as a semver string
        /// </summary>
        /// <remarks>Requests that the beacon node identify information about its implementation in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) field.</remarks>
        /// <response code="200">Request successful</response>
        /// <response code="500">Beacon node internal error.</response>
        [HttpGet]
        [Route("/insight-dc-sv-2020/Spacemesh_Public_OpenAPI/1.0.0/node/version")]
        [ValidateModelState]
        [SwaggerOperation("NodeVersionGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Version), description: "Request successful")]
        public virtual IActionResult NodeVersionGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Version));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "\"Lighthouse / v0.1.5 (Linux x86_64)\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Version>(exampleJson)
                        : default(Version);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
