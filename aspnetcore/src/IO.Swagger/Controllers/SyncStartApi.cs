/*
 * OpenAPI Implementation of Eth 2.0 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SyncStartApiController : ControllerBase
    { 
        /// <summary>
        /// Request that the node start syncing the mesh.
        /// </summary>
        /// <remarks>Requests the beacon node to provide which fork version it is currently on.</remarks>
        /// <response code="200">Request successful</response>
        /// <response code="500">Beacon node internal error.</response>
        [HttpGet]
        [Route("/insight-dc-sv-2020/Spacemesh_Public_OpenAPI/1.0.0/node/fork")]
        [ValidateModelState]
        [SwaggerOperation("NodeForkGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "Request successful")]
        public virtual IActionResult NodeForkGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"fork\" : {\n    \"previous_version\" : \"\",\n    \"current_version\" : \"\",\n    \"epoch\" : 0\n  },\n  \"chain_id\" : 6\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson)
                        : default(InlineResponse2001);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Request that the node start syncing the mesh.
        /// </summary>
        /// <remarks>Requests the beacon node to provide a set of _duties_, which are actions that should be performed by validators. This API call should be polled at every slot, to ensure that any chain reorganisations are catered for, and to ensure that the currently connected beacon node is properly synchronised.</remarks>
        /// <param name="validatorPubkeys">An array of hex-encoded BLS public keys</param>
        /// <response code="200">Success response</response>
        /// <response code="400">Invalid request syntax.</response>
        /// <response code="500">Beacon node internal error.</response>
        /// <response code="503">Beacon node is currently syncing, try again later.</response>
        [HttpGet]
        [Route("/insight-dc-sv-2020/Spacemesh_Public_OpenAPI/1.0.0/validator/duties")]
        [ValidateModelState]
        [SwaggerOperation("ValidatorDutiesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ValidatorDuty>), description: "Success response")]
        public virtual IActionResult ValidatorDutiesGet([FromQuery][Required()]List<Pubkey> validatorPubkeys)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ValidatorDuty>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);
            string exampleJson = null;
            exampleJson = "[ {\n  \"attestation_shard\" : 1,\n  \"attestation_slot\" : 6,\n  \"block_production_slot\" : 5,\n  \"committee_index\" : 0,\n  \"validator_pubkey\" : \"\"\n}, {\n  \"attestation_shard\" : 1,\n  \"attestation_slot\" : 6,\n  \"block_production_slot\" : 5,\n  \"committee_index\" : 0,\n  \"validator_pubkey\" : \"\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ValidatorDuty>>(exampleJson)
                        : default(List<ValidatorDuty>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
