/*
 * OpenAPI Implementation of Eth 2.0 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SyncingStatus : IEquatable<SyncingStatus>
    { 
        /// <summary>
        /// The block at which syncing started (will only be reset after the sync reached its head)
        /// </summary>
        /// <value>The block at which syncing started (will only be reset after the sync reached its head)</value>
        [DataMember(Name="starting_block")]
        public int? StartingBlock { get; set; }

        /// <summary>
        /// The current highest block sync&#x27;d by the beacon node.
        /// </summary>
        /// <value>The current highest block sync&#x27;d by the beacon node.</value>
        [DataMember(Name="current_block")]
        public int? CurrentBlock { get; set; }

        /// <summary>
        /// The estimated highest block, or current target block number.
        /// </summary>
        /// <value>The estimated highest block, or current target block number.</value>
        [DataMember(Name="highest_block")]
        public int? HighestBlock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyncingStatus {\n");
            sb.Append("  StartingBlock: ").Append(StartingBlock).Append("\n");
            sb.Append("  CurrentBlock: ").Append(CurrentBlock).Append("\n");
            sb.Append("  HighestBlock: ").Append(HighestBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SyncingStatus)obj);
        }

        /// <summary>
        /// Returns true if SyncingStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of SyncingStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyncingStatus other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StartingBlock == other.StartingBlock ||
                    StartingBlock != null &&
                    StartingBlock.Equals(other.StartingBlock)
                ) && 
                (
                    CurrentBlock == other.CurrentBlock ||
                    CurrentBlock != null &&
                    CurrentBlock.Equals(other.CurrentBlock)
                ) && 
                (
                    HighestBlock == other.HighestBlock ||
                    HighestBlock != null &&
                    HighestBlock.Equals(other.HighestBlock)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StartingBlock != null)
                    hashCode = hashCode * 59 + StartingBlock.GetHashCode();
                    if (CurrentBlock != null)
                    hashCode = hashCode * 59 + CurrentBlock.GetHashCode();
                    if (HighestBlock != null)
                    hashCode = hashCode * 59 + HighestBlock.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SyncingStatus left, SyncingStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SyncingStatus left, SyncingStatus right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
