/*
 * OpenAPI Implementation of Eth 2.0 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BeaconBlockCommon : IEquatable<BeaconBlockCommon>
    { 
        /// <summary>
        /// The slot to which this block corresponds.
        /// </summary>
        /// <value>The slot to which this block corresponds.</value>
        [DataMember(Name="slot")]
        public int? Slot { get; set; }

        /// <summary>
        /// The signing merkle root of the parent &#x60;BeaconBlock&#x60;.
        /// </summary>
        /// <value>The signing merkle root of the parent &#x60;BeaconBlock&#x60;.</value>
        [DataMember(Name="parent_root")]
        public string ParentRoot { get; set; }

        /// <summary>
        /// The tree hash merkle root of the &#x60;BeaconState&#x60; for the &#x60;BeaconBlock&#x60;.
        /// </summary>
        /// <value>The tree hash merkle root of the &#x60;BeaconState&#x60; for the &#x60;BeaconBlock&#x60;.</value>
        [DataMember(Name="state_root")]
        public string StateRoot { get; set; }

        /// <summary>
        /// The BLS signature of the &#x60;BeaconBlock&#x60; made by the validator of the block.
        /// </summary>
        /// <value>The BLS signature of the &#x60;BeaconBlock&#x60; made by the validator of the block.</value>
        [DataMember(Name="signature")]
        public string Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BeaconBlockCommon {\n");
            sb.Append("  Slot: ").Append(Slot).Append("\n");
            sb.Append("  ParentRoot: ").Append(ParentRoot).Append("\n");
            sb.Append("  StateRoot: ").Append(StateRoot).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BeaconBlockCommon)obj);
        }

        /// <summary>
        /// Returns true if BeaconBlockCommon instances are equal
        /// </summary>
        /// <param name="other">Instance of BeaconBlockCommon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BeaconBlockCommon other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Slot == other.Slot ||
                    Slot != null &&
                    Slot.Equals(other.Slot)
                ) && 
                (
                    ParentRoot == other.ParentRoot ||
                    ParentRoot != null &&
                    ParentRoot.Equals(other.ParentRoot)
                ) && 
                (
                    StateRoot == other.StateRoot ||
                    StateRoot != null &&
                    StateRoot.Equals(other.StateRoot)
                ) && 
                (
                    Signature == other.Signature ||
                    Signature != null &&
                    Signature.Equals(other.Signature)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Slot != null)
                    hashCode = hashCode * 59 + Slot.GetHashCode();
                    if (ParentRoot != null)
                    hashCode = hashCode * 59 + ParentRoot.GetHashCode();
                    if (StateRoot != null)
                    hashCode = hashCode * 59 + StateRoot.GetHashCode();
                    if (Signature != null)
                    hashCode = hashCode * 59 + Signature.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BeaconBlockCommon left, BeaconBlockCommon right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BeaconBlockCommon left, BeaconBlockCommon right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
