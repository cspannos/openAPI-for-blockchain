/*
 * OpenAPI Implementation of Eth 2.0 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The [&#x60;AttesterSlashing&#x60;](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#attesterslashing) object from the Eth2.0 spec.
    /// </summary>
    [DataContract]
    public partial class AttesterSlashings : IEquatable<AttesterSlashings>
    { 
        /// <summary>
        /// Gets or Sets Attestation1
        /// </summary>
        [DataMember(Name="attestation_1")]
        public IndexedAttestation Attestation1 { get; set; }

        /// <summary>
        /// Gets or Sets Attestation2
        /// </summary>
        [DataMember(Name="attestation_2")]
        public IndexedAttestation Attestation2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttesterSlashings {\n");
            sb.Append("  Attestation1: ").Append(Attestation1).Append("\n");
            sb.Append("  Attestation2: ").Append(Attestation2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AttesterSlashings)obj);
        }

        /// <summary>
        /// Returns true if AttesterSlashings instances are equal
        /// </summary>
        /// <param name="other">Instance of AttesterSlashings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttesterSlashings other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Attestation1 == other.Attestation1 ||
                    Attestation1 != null &&
                    Attestation1.Equals(other.Attestation1)
                ) && 
                (
                    Attestation2 == other.Attestation2 ||
                    Attestation2 != null &&
                    Attestation2.Equals(other.Attestation2)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Attestation1 != null)
                    hashCode = hashCode * 59 + Attestation1.GetHashCode();
                    if (Attestation2 != null)
                    hashCode = hashCode * 59 + Attestation2.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AttesterSlashings left, AttesterSlashings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AttesterSlashings left, AttesterSlashings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
