/*
 * OpenAPI Implementation of Eth 2.0 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The [&#x60;ProposerSlashing&#x60;](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#proposerslashing) object from the Eth2.0 spec.
    /// </summary>
    [DataContract]
    public partial class ProposerSlashings : IEquatable<ProposerSlashings>
    { 
        /// <summary>
        /// The index of the proposer to be slashed.
        /// </summary>
        /// <value>The index of the proposer to be slashed.</value>
        [DataMember(Name="proposer_index")]
        public int? ProposerIndex { get; set; }

        /// <summary>
        /// Gets or Sets Header1
        /// </summary>
        [DataMember(Name="header_1")]
        public BeaconBlockHeader Header1 { get; set; }

        /// <summary>
        /// Gets or Sets Header2
        /// </summary>
        [DataMember(Name="header_2")]
        public BeaconBlockHeader Header2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProposerSlashings {\n");
            sb.Append("  ProposerIndex: ").Append(ProposerIndex).Append("\n");
            sb.Append("  Header1: ").Append(Header1).Append("\n");
            sb.Append("  Header2: ").Append(Header2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProposerSlashings)obj);
        }

        /// <summary>
        /// Returns true if ProposerSlashings instances are equal
        /// </summary>
        /// <param name="other">Instance of ProposerSlashings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProposerSlashings other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProposerIndex == other.ProposerIndex ||
                    ProposerIndex != null &&
                    ProposerIndex.Equals(other.ProposerIndex)
                ) && 
                (
                    Header1 == other.Header1 ||
                    Header1 != null &&
                    Header1.Equals(other.Header1)
                ) && 
                (
                    Header2 == other.Header2 ||
                    Header2 != null &&
                    Header2.Equals(other.Header2)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProposerIndex != null)
                    hashCode = hashCode * 59 + ProposerIndex.GetHashCode();
                    if (Header1 != null)
                    hashCode = hashCode * 59 + Header1.GetHashCode();
                    if (Header2 != null)
                    hashCode = hashCode * 59 + Header2.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProposerSlashings left, ProposerSlashings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProposerSlashings left, ProposerSlashings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
