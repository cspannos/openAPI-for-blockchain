/*
 * OpenAPI Implementation of Spacemesh API 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ValidatorDuty : IEquatable<ValidatorDuty>
    { 
        /// <summary>
        /// Gets or Sets ValidatorPubkey
        /// </summary>
        [DataMember(Name="validator_pubkey")]
        public Pubkey ValidatorPubkey { get; set; }

        /// <summary>
        /// The index of the validator in the committee.
        /// </summary>
        /// <value>The index of the validator in the committee.</value>
        [DataMember(Name="committee_index")]
        public int? CommitteeIndex { get; set; }

        /// <summary>
        /// The slot at which the validator must attest.
        /// </summary>
        /// <value>The slot at which the validator must attest.</value>
        [DataMember(Name="attestation_slot")]
        public int? AttestationSlot { get; set; }

        /// <summary>
        /// The shard in which the validator must attest.
        /// </summary>
        /// <value>The shard in which the validator must attest.</value>
        [DataMember(Name="attestation_shard")]
        public int? AttestationShard { get; set; }

        /// <summary>
        /// The slot in which a validator must propose a block, or &#x60;null&#x60; if block production is not required.
        /// </summary>
        /// <value>The slot in which a validator must propose a block, or &#x60;null&#x60; if block production is not required.</value>
        [DataMember(Name="block_production_slot")]
        public int? BlockProductionSlot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidatorDuty {\n");
            sb.Append("  ValidatorPubkey: ").Append(ValidatorPubkey).Append("\n");
            sb.Append("  CommitteeIndex: ").Append(CommitteeIndex).Append("\n");
            sb.Append("  AttestationSlot: ").Append(AttestationSlot).Append("\n");
            sb.Append("  AttestationShard: ").Append(AttestationShard).Append("\n");
            sb.Append("  BlockProductionSlot: ").Append(BlockProductionSlot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ValidatorDuty)obj);
        }

        /// <summary>
        /// Returns true if ValidatorDuty instances are equal
        /// </summary>
        /// <param name="other">Instance of ValidatorDuty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidatorDuty other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ValidatorPubkey == other.ValidatorPubkey ||
                    ValidatorPubkey != null &&
                    ValidatorPubkey.Equals(other.ValidatorPubkey)
                ) && 
                (
                    CommitteeIndex == other.CommitteeIndex ||
                    CommitteeIndex != null &&
                    CommitteeIndex.Equals(other.CommitteeIndex)
                ) && 
                (
                    AttestationSlot == other.AttestationSlot ||
                    AttestationSlot != null &&
                    AttestationSlot.Equals(other.AttestationSlot)
                ) && 
                (
                    AttestationShard == other.AttestationShard ||
                    AttestationShard != null &&
                    AttestationShard.Equals(other.AttestationShard)
                ) && 
                (
                    BlockProductionSlot == other.BlockProductionSlot ||
                    BlockProductionSlot != null &&
                    BlockProductionSlot.Equals(other.BlockProductionSlot)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ValidatorPubkey != null)
                    hashCode = hashCode * 59 + ValidatorPubkey.GetHashCode();
                    if (CommitteeIndex != null)
                    hashCode = hashCode * 59 + CommitteeIndex.GetHashCode();
                    if (AttestationSlot != null)
                    hashCode = hashCode * 59 + AttestationSlot.GetHashCode();
                    if (AttestationShard != null)
                    hashCode = hashCode * 59 + AttestationShard.GetHashCode();
                    if (BlockProductionSlot != null)
                    hashCode = hashCode * 59 + BlockProductionSlot.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ValidatorDuty left, ValidatorDuty right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ValidatorDuty left, ValidatorDuty right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
