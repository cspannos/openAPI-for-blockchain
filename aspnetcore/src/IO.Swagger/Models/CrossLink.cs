/*
 * OpenAPI Implementation of Spacemesh API 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The [&#x60;Crosslink&#x60;](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#crosslink) object from the Eth2.0 spec.
    /// </summary>
    [DataContract]
    public partial class CrossLink : IEquatable<CrossLink>
    { 
        /// <summary>
        /// The shard number.
        /// </summary>
        /// <value>The shard number.</value>
        [DataMember(Name="shard")]
        public int? Shard { get; set; }

        /// <summary>
        /// The epoch number.
        /// </summary>
        /// <value>The epoch number.</value>
        [DataMember(Name="epoch")]
        public int? Epoch { get; set; }

        /// <summary>
        /// Root of the previous crosslink.
        /// </summary>
        /// <value>Root of the previous crosslink.</value>
        [DataMember(Name="parent_root")]
        public byte[] ParentRoot { get; set; }

        /// <summary>
        /// Root of the crosslinked shard data since the previous crosslink.
        /// </summary>
        /// <value>Root of the crosslinked shard data since the previous crosslink.</value>
        [DataMember(Name="data_root")]
        public byte[] DataRoot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossLink {\n");
            sb.Append("  Shard: ").Append(Shard).Append("\n");
            sb.Append("  Epoch: ").Append(Epoch).Append("\n");
            sb.Append("  ParentRoot: ").Append(ParentRoot).Append("\n");
            sb.Append("  DataRoot: ").Append(DataRoot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CrossLink)obj);
        }

        /// <summary>
        /// Returns true if CrossLink instances are equal
        /// </summary>
        /// <param name="other">Instance of CrossLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossLink other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Shard == other.Shard ||
                    Shard != null &&
                    Shard.Equals(other.Shard)
                ) && 
                (
                    Epoch == other.Epoch ||
                    Epoch != null &&
                    Epoch.Equals(other.Epoch)
                ) && 
                (
                    ParentRoot == other.ParentRoot ||
                    ParentRoot != null &&
                    ParentRoot.Equals(other.ParentRoot)
                ) && 
                (
                    DataRoot == other.DataRoot ||
                    DataRoot != null &&
                    DataRoot.Equals(other.DataRoot)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Shard != null)
                    hashCode = hashCode * 59 + Shard.GetHashCode();
                    if (Epoch != null)
                    hashCode = hashCode * 59 + Epoch.GetHashCode();
                    if (ParentRoot != null)
                    hashCode = hashCode * 59 + ParentRoot.GetHashCode();
                    if (DataRoot != null)
                    hashCode = hashCode * 59 + DataRoot.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CrossLink left, CrossLink right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CrossLink left, CrossLink right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
