/*
 * OpenAPI Implementation of Eth 2.0 
 *
 * Minimal OpenAPI specification for Spacemesh public facing API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The [&#x60;Transfer&#x60;](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/0_beacon-chain.md#transfer) object from the Eth2.0 spec.
    /// </summary>
    [DataContract]
    public partial class Transfer : IEquatable<Transfer>
    { 
        /// <summary>
        /// Sender index.
        /// </summary>
        /// <value>Sender index.</value>
        [DataMember(Name="sender")]
        public int? Sender { get; set; }

        /// <summary>
        /// Recipient index.
        /// </summary>
        /// <value>Recipient index.</value>
        [DataMember(Name="recipient")]
        public int? Recipient { get; set; }

        /// <summary>
        /// Amount in Gwei.
        /// </summary>
        /// <value>Amount in Gwei.</value>
        [DataMember(Name="amount")]
        public int? Amount { get; set; }

        /// <summary>
        /// Fee in Gwei for block producer.
        /// </summary>
        /// <value>Fee in Gwei for block producer.</value>
        [DataMember(Name="fee")]
        public int? Fee { get; set; }

        /// <summary>
        /// Inclusion slot.
        /// </summary>
        /// <value>Inclusion slot.</value>
        [DataMember(Name="slot")]
        public int? Slot { get; set; }

        /// <summary>
        /// Sender withdrawal public key.
        /// </summary>
        /// <value>Sender withdrawal public key.</value>
        [DataMember(Name="pubkey")]
        public byte[] Pubkey { get; set; }

        /// <summary>
        /// Sender signature.
        /// </summary>
        /// <value>Sender signature.</value>
        [DataMember(Name="signature")]
        public byte[] Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transfer {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Slot: ").Append(Slot).Append("\n");
            sb.Append("  Pubkey: ").Append(Pubkey).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Transfer)obj);
        }

        /// <summary>
        /// Returns true if Transfer instances are equal
        /// </summary>
        /// <param name="other">Instance of Transfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transfer other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Sender == other.Sender ||
                    Sender != null &&
                    Sender.Equals(other.Sender)
                ) && 
                (
                    Recipient == other.Recipient ||
                    Recipient != null &&
                    Recipient.Equals(other.Recipient)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Fee == other.Fee ||
                    Fee != null &&
                    Fee.Equals(other.Fee)
                ) && 
                (
                    Slot == other.Slot ||
                    Slot != null &&
                    Slot.Equals(other.Slot)
                ) && 
                (
                    Pubkey == other.Pubkey ||
                    Pubkey != null &&
                    Pubkey.Equals(other.Pubkey)
                ) && 
                (
                    Signature == other.Signature ||
                    Signature != null &&
                    Signature.Equals(other.Signature)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Sender != null)
                    hashCode = hashCode * 59 + Sender.GetHashCode();
                    if (Recipient != null)
                    hashCode = hashCode * 59 + Recipient.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Fee != null)
                    hashCode = hashCode * 59 + Fee.GetHashCode();
                    if (Slot != null)
                    hashCode = hashCode * 59 + Slot.GetHashCode();
                    if (Pubkey != null)
                    hashCode = hashCode * 59 + Pubkey.GetHashCode();
                    if (Signature != null)
                    hashCode = hashCode * 59 + Signature.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Transfer left, Transfer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Transfer left, Transfer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
